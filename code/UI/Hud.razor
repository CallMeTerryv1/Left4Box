@using System
@using System.Linq
@using Sandbox;
@inherits PanelComponent
@namespace GeneralGame

@if ( !LocalPlayer.IsValid() ) return;

<root>
	@{
		var weapon = LocalPlayer.Weapons.Deployed;

		BaseGun bsGun = null;
	}

	@if (weapon.IsValid() && weapon.Components.GetInDescendantsOrSelf<BaseGun>(true).IsValid())
	{
		bsGun = weapon.Components.GetInDescendantsOrSelf<BaseGun>();
	}
   

	@if (bsGun.IsValid() && LocalPlayer.LifeState == LifeState.Alive)
	{

		<div class="ammo">
			@{
				var totalAmmo = LocalPlayer.Ammo.Get(bsGun.AmmoType);
			}
			<label class="clip">@bsGun.AmmoInClip</label>/<label class="total">@totalAmmo</label>
		</div>
	}
	
	<div class="center">
		@* Piese of shit redo this some day*@
        @if (weapon.IsValid())
		{
            @if (bsGun.IsValid() && !bsGun.IsAiming)
            {
                <div class="crosshair"></div>
            }
            else if (!bsGun.IsValid())
            {
                <div class="crosshair"></div>
            }
        }
	</div>

    @* Display Player Points *@
    <div class="points">
        <label class="points-label">Points:</label>
        <label class="points-value">@Points</label>
    </div>

</root>

@code
{
    private PlayerObject LocalPlayer { get; set; }
    public int Points { get; private set; } = 500; // Tracks The Points In The Players HUD

    protected override void OnFixedUpdate()
    {
        if ( !LocalPlayer.IsValid() )
        {
            LocalPlayer = Scene.GetAllComponents<PlayerObject>().FirstOrDefault( p => p.Network.OwnerConnection == Connection.Local );
        }

        if (LocalPlayer.IsValid())
        {
            Points = LocalPlayer.Points; // Snyc The Players Points With The HUD Dumb Fuck
            StateHasChanged(); // Force The UI To Update
        }
    }

    // Method To Update Points Directly From PlayerObject
    public void UpdatePlayerPoints(int points)
    {
        Points = points;
        StateHasChanged();  // Force The UI To Refresh
    }

    protected override int BuildHash() => HashCode.Combine( RealTime.Now );
}
